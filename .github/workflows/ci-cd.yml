name: Build, Terraform, and Deploy

on:
  push:
    branches:
      - main
      - 'feature/**'

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform-build-deploy:
    name: Terraform Plan & Apply, Build, Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Show Terraform version
        run: terraform version

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init -backend-config=${{ vars.TF_BACKEND_CONFIG }}
        working-directory: infra

      - name: Terraform Apply Key Vault
        run: |
          terraform plan -out=tfplan.key_vault -target=module.key_vault -var-file=${{ vars.TF_VARS_CONFIG }}
          terraform apply tfplan.key_vault
        working-directory: infra

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file=${{ vars.TF_VARS_CONFIG }}
        working-directory: infra

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra

      - name: Get Terraform outputs
        id: tf_outputs
        run: |
          echo "events_app_name=$(terraform output -raw events_app_name)" >> "$GITHUB_OUTPUT"
          echo "aggregator_app_name=$(terraform output -raw aggregator_app_name)" >> "$GITHUB_OUTPUT"
          echo "events_app_url=$(terraform output -raw events_app_url)" >> "$GITHUB_OUTPUT"
          echo "events_app_client_credentials_scope=$(terraform output -raw events_app_client_credentials_scope)" >> "$GITHUB_OUTPUT"
          echo "aggregator_app_url=$(terraform output -raw aggregator_app_url)" >> "$GITHUB_OUTPUT"
          echo "aggregator_app_client_credentials_scope=$(terraform output -raw aggregator_app_client_credentials_scope)" >> "$GITHUB_OUTPUT"
          echo "token_uri=$(terraform output -raw token_uri)" >> "$GITHUB_OUTPUT"
          echo "e2e_client_id=$(terraform output -raw e2e_client_id)" >> "$GITHUB_OUTPUT"
          echo "e2e_client_secret=$(terraform output -raw e2e_client_secret)" >> "$GITHUB_OUTPUT"
          
          # Mask the secret so it never appears in logs
          echo "::add-mask::$(terraform output -raw e2e_client_secret)"
        working-directory: infra

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew build

      - name: Deploy Events to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.tf_outputs.outputs.events_app_name }}
          package: "events/build/libs/events.jar"

      - name: Deploy Aggregator to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.tf_outputs.outputs.aggregator_app_name }}
          package: "aggregator/build/libs/aggregator.jar"

      - name: Check App Health
        run: | 
          for i in {1..20}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.tf_outputs.outputs.aggregator_app_url }}/actuator/health) 
            echo "Health check HTTP status: $STATUS"
            if [ "$STATUS" -eq 200 ]; then
              echo "✅ App is healthy!"
              exit 0
            fi
            echo "Waiting for app to become healthy... ($i/10)"
            sleep 10
          done
          echo "❌ App failed to become healthy in time"
          exit 1

      - name: Run E2E Tests
        run: ./gradlew e2e:test
        env:
          TOKEN_URI: ${{ steps.tf_outputs.outputs.token_uri }}
          CLIENT_ID: ${{ steps.tf_outputs.outputs.e2e_client_id }}
          CLIENT_SECRET: ${{ steps.tf_outputs.outputs.e2e_client_secret }}
          EVENTS_API_BASE_URL: ${{ steps.tf_outputs.outputs.events_app_url }}
          AGGREGATOR_API_BASE_URL: ${{ steps.tf_outputs.outputs.aggregator_app_url }}
          EVENTS_APP_SCOPE: ${{ steps.tf_outputs.outputs.events_app_client_credentials_scope }}
          AGGREGATOR_APP_SCOPE: ${{ steps.tf_outputs.outputs.aggregator_app_client_credentials_scope }}